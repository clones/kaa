Small API doc for kaa.beacon. Some parts are still missing but everything
written here should work. The variable / function names may change in
the future. 

DO NOT ACCESS ANY MEMBER FUNCTIONS OR VARIABLES STARTING WIRH _beacon!!!
They are for internal use only and you can do stuff with the db you
should not be able to do.


Fill the database

You can use the monitor stuff (I will explain later) or you can use
the cache test app to fill the database. Open cache.py in the test dir
and change the db path to the localtion of your database
(e.g. /var/lib/freevo/beacondb). After that call python cache.py with a
directory as argument. The test app will recursive add the files to
the database.


Access the database

First you need to connect to the database. After that you can get a
directory object and call the listdir() memeber function. You get a
Query object in return. Besides some monitoring stuff, the class has
an interator to walk through the list of results:

| kaa.beacon.connect('/var/lib/freevo/beacondb')
| directory = kaa.beacon.get('/home/mp3')
| listing = directory.listdir()
| for item in listing:
|     print item

Item is an object of the type Item (or higher classes like File or
Directory. You will be able to change that in later versions of
kaa.beacon to your own classes). Directory object have a 'listdir()'
again (other types will also have a list in the future). You can
access the attributes from the database with the memeber function
'getattr()'. A File/Directory also has attributes 'url', 'filename'
and 'isdir'. To get a list of all possible attributes call 'keys()'.
Using the attribute 'thumbnail' will return a Thumbnail object for
that item you can use to get/set/create thumbnails. The thumbnail
object has (besides other things) a member variable 'image' returning
the thumbnail filename with the highest resolution or None if no
thumbnail exists. If no thumbnail exists, you get check the meber
variable 'failed' to check if you already tried to create a thumbnail
and failed. If this returns False, you can use the function 'create()'
to create a thumbnail. The arguments are size (NORMAL or LARGE) and
the flag 'wait'. If 'wait' is True the function will block using
notifier.step until the thumbnail is created. If 'wait' is False
(default), the function will return a Signal you can connect to to get
notice when thumbnailing is done. NOTICE: you need to keep the
thumbnail object, if you delete the object, a scheduled thumbnailing
will be stopped.

| thumbnail = item.getattr('thumbnail')
| if thumbnail.image:
|     print 'thumbnail is', thumbnail.image
|     return
| if thumbnail.failed:
|     print 'unable to create thumbnail for', item.filename
|     return
| # create one (blocking)
| thumbnail.create('large', True)



Hidden features

The beacon server can also be used as a small test application. In
normal use, the server won't connect to a database unless a client
connects. You can force the server to connect on startup setting the
environment variable BEACON_DATABASE to the location of the database.
A second environment variable is BEACON_MONITOR, a collon separated
list of directories (plus subdirectories) to be monitored using
inotify. Both variables are created to help testing beacon, the may be
removed later.

Example:
export BEACON_DATABASE=/home/dmeyer/.beacon
export BEACON_MONITOR=/home/dmeyer/video:/home/dmeyer/mp3 
beacon --start --verbose crawler,db


Logging

The default logfile for the server is $(dbdir)/server.log and $(dbdir)/fuse.log
for mount where $(dbdir) is $HOME/.beacon (the default) or as specified by the
--db command line option.  If --fg is specified, to make the process run in the
foreground, there will be no log files created and the logs will go to stderr.
If you would like to run in the foreground and also log to a file then you must
explicitly use --logfile /path/to/server.log.  This is especially useful for 
running beacon from /etc/inittab.



More about kaa.beacon later
