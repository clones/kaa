#!/usr/bin/python

# python imports
import os
import sys
import gc
import getopt
import time
import logging
import stat
import fuse
import errno

# insert freevo path information
__site__ = '../lib/python%s.%s/site-packages' % sys.version_info[:2]
__site__ = os.path.normpath(os.path.join(os.path.dirname(__file__), __site__))
if not __site__ in sys.path:
    sys.path.insert(0, __site__)

import kaa.notifier
import kaa.beacon

# get logging object
log = logging.getLogger('beacon')

class MyStat(fuse.Stat):
    def __init__(self):
        self.st_mode = 0
        self.st_ino = 0
        self.st_dev = 0
        self.st_nlink = 0
        self.st_uid = 0
        self.st_gid = 0
        self.st_size = 0
        self.st_atime = 0
        self.st_mtime = 0
        self.st_ctime = 0

class beaconfs ( fuse.Fuse ):
    def __init__ ( self, *args, **kw ):
        fuse.Fuse.__init__ ( self, *args, **kw )

    def getattr(self, path):
        st = MyStat()
        if path == '/':
            st.st_mode = stat.S_IFDIR | 0755
            st.st_nlink = 2
            return st
        
        for q in query:
            if not q.getattr('name') == path[1:]:
                continue
            orig = os.stat(q.filename)
            st.st_mode = stat.S_IFREG | 0444
            st.st_nlink = 1
            st.st_size = orig[stat.ST_SIZE]
            break
        else:
            return -errno.ENOENT
        return st
    
    def open(self, path, flags):
        for q in query:
            if not q.getattr('name') == path[1:]:
                continue
            accmode = os.O_RDONLY | os.O_WRONLY | os.O_RDWR
            if (flags & accmode) != os.O_RDONLY:
                return -errno.EACCES
            return 0
        else:
            return -errno.ENOENT
                
    def read(self, path, size, offset):
        print 'read', path, size, offset
        for q in query:
            if not q.getattr('name') == path[1:]:
                continue
            # this is ugly, keep track of open/close
            fd = open(q.filename, 'r')
            fd.seek(offset, 0)
            buf = fd.read(size)
            fd.close()
            return buf

    def readdir(self, path, offset):
        for r in  '.', '..':
            yield fuse.Direntry(r)
        for i in query:
            yield fuse.Direntry(i.getattr('name'))


def fuse_main():
    sys.argv.append("-f")
    server = beaconfs()
    server.multithreaded = 1
    server.parse(errex=1)
    server.main ()
    kaa.notifier.MainThreadCallback(kaa.notifier.shutdown)()

    
def debug():
    import time
    print time.time()

query = {}
while len(sys.argv) > 2:
    key, value = sys.argv.pop().split('=', 1)
    if key in ('title', 'album', 'artist'):
        value = unicode(value)
    elif key in ('limit',):
        value = int(value)
    if isinstance(value, basestring) and "%" in value:
        # Treat as wildcard search, use LIKE operator.
        query[key] = kaa.db.QExpr("like", "%%%s%%" % value)
    else:
        query[key] = value

kaa.beacon.connect()
query = kaa.beacon.query(**query)
len(query)
kaa.notifier.Thread(fuse_main).start()
kaa.notifier.Timer(debug).start(1)
kaa.notifier.loop()
