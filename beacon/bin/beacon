#!/usr/bin/python

# python imports
import os
import sys
import gc
import getopt
import time
import logging

# insert freevo path information
__site__ = '../lib/python%s.%s/site-packages' % sys.version_info[:2]
__site__ = os.path.normpath(os.path.join(os.path.dirname(__file__), __site__))
if not __site__ in sys.path:
    sys.path.insert(0, __site__)

# get logging object
log = logging.getLogger()

def usage(error_code):
    print 'beacon [options]'
    print 'options:'
    print '--start             start beacon'
    print '--stop              stop running beacon'
    print '--daemon            detach for parent process'
    print '--autoshutdown      stop server when no clients are connected'
    print '--logfile file      use file for logging'
    print '--verbose modules   comma separated list of modules which should be more'
    print '                    verbose. Possible modules are db, notifier, crawler'
    print '                    Use \'all\' to increase every module.'
    print '--help | -h         this message'
    print
    print 'Client options:'
    print '--search args      search mode'
    print '--monitor          do not exit after search and monitor for changes'
    print
    print 'Examples for client mode when a server is running:'
    print '  beacon --search dirname=/local/video'
    print '  beacon --search --monitor dirname=/local/video'
    print '  beacon --search artist=Silbermond'
    print '  beacon --search attr=album type=audio'
    print '  beacon --search "keywords=Helden Blind"'
    sys.exit(error_code)

    
try:
    # read arguments
    opts = [ 'start', 'stop', 'daemon', 'autoshutdown', 'logfile=', 'verbose=',
             'help', 'search', 'monitor' ]
    opts, args = getopt.getopt(sys.argv[1:], 'h', opts)
except getopt.GetoptError:
    usage(1)

logfile  = ''
mode     = None
detach   = False
shutdown = False
monitor  = False

for o, a in opts:
    if o in ('--start', '--stop', '--search'):
        if mode:
            usage(1)
        mode = o[2:]
    if o == '--daemon':
        detach = True
    if o == '--autoshutdown':
        shutdown = True
    if o == '--logfile':
        logfile = a
    if o == '--verbose':
        a = a.lower()
        if a == 'all':
            log.setLevel(logging.INFO)
        else:
            for m in a.split(','):
                logging.getLogger(m).setLevel(logging.INFO)
    if o == '--monitor':
        monitor = True
    if o in ('--help', '-h'):
        usage(0)

if not mode:
    # no idea what to do
    usage(0)

if mode == 'stop':
    # stop a running beacon
    
    import kaa.ipc

    try:
        kaa.ipc.IPCClient('beacon').get_object('shutdown')()
    except kaa.ipc.IPCDisconnectedError:
        pass
    except:
        print 'server not running'
    sys.exit(0)

if mode == 'search':
    # client search mode

    import kaa.notifier
    import kaa.beacon

    def progress(cur, total, item):
        n = 0
        if total > 0:
            n = int((cur / float(total)) * 50)
        sys.stdout.write("|%51s| %d / %d\r" % (("="*n + ">").ljust(51), cur, total))
        sys.stdout.flush()
        if cur == total:
            print

    def changed(result):
        print 'Beacon query update'
        for r in result:
            print r

    def uptodate():
        print 'Beacon has finished the query and parsing'


    query   = {}
    for a in args:
        key, value = a.split('=', 1)
        if key in ('title', 'album', 'artist'):
            value = unicode(value)
        query[key] = value

    try:
        kaa.beacon.connect(os.path.expanduser("~/.beacon"))
    except:
        print 'beacon server not running'
        sys.exit(1)
    
    if 'dirname' in query:
        t1 = time.time()
        result = kaa.beacon.get(query['dirname']).listdir()
        t2 = time.time()
    else:
        t1 = time.time()
        result = kaa.beacon.query(**query)
        t2 = time.time()

    for r in result:
        print r
    print 'Query took %s seconds' % (t2-t1)

    if monitor:
        result.signals['changed'].connect(changed, result)
        result.signals['progress'].connect(progress)
        result.signals['up-to-date'].connect(uptodate)
        result.monitor()
    else:
        kaa.notifier.OneShotTimer(sys.exit, 0).start(0.1)

    kaa.notifier.loop()
    sys.exit(0)

    
# When we reach this point we need to start a new beacon server. If run
# in daemon mode we fork and detach from the parent. After that a logger
# is created and the thumbnail server will be forked out.

if detach:
    if os.fork():
        sys.exit(0)
    os.setsid()
    
# create logger
if logfile:
    if not os.path.isdir(os.path.dirname(logfile)):
        os.makedirs(os.path.dirname(logfile))
    handler = logging.FileHandler(logfile)
    f = logging.Formatter('%(asctime)s %(levelname)-8s [%(name)6s] '+\
                          '%(filename)s %(lineno)s: %(message)s')
    handler.setFormatter(f)
    log.addHandler(handler)
elif detach:
    print 'unable to detach without setting a logfile'
    usage(1)
    
# fork thumbnailer
pid = os.fork()

if not pid:
    # thumbnailer child
    import kaa
    import kaa.notifier

    import kaa.beacon.thumbnail.server

    # create tmp dir and change directory to it
    tmpdir = os.path.join(kaa.TEMP, 'thumb')
    if not os.path.isdir(tmpdir):
        os.mkdir(tmpdir)
    os.chdir(tmpdir)

    # create thumbnailer object
    try:
        thumbnailer = kaa.beacon.thumbnail.server.Thumbnailer(tmpdir)
    except IOError, e:
        log.error('thumbnail: %s' % e)
        time.sleep(0.1)
        sys.exit(0)

    # set nice level
    os.nice(19)
    
    # loop
    kaa.notifier.loop()
    log.info('stop thumbnail server')
    sys.exit(0)
    


# beacon server
import kaa
import kaa.notifier
import kaa.ipc

import kaa.beacon.server
import kaa.beacon.thumbnail.thumbnail

def garbage_collect():
    g = gc.collect()
    if g:
        log.info('gc: deleted %s objects' % g)
    if gc.garbage:
        log.warning('gc: found %s garbage objects' % len(gc.garbage))
        for g in gc.garbage:
            log.warning(g)
    return True


# connect thumbnailer
log.info('connect to thumbnailer')
kaa.beacon.thumbnail.thumbnail.connect()

try:
    ipc = kaa.ipc.IPCServer('beacon')
except IOError, e:
    kaa.beacon.thumbnail.thumbnail.disconnect()
    log.error('beacon: %s' % e)
    time.sleep(0.1)
    sys.exit(0)

log.info('start beacon')
ipc.register_object(kaa.beacon.server.connect, 'beacon')
ipc.register_object(kaa.notifier.shutdown, 'shutdown')
ipc.signals["client_closed"].connect(kaa.beacon.server._client_closed)

if os.environ.get('BEACON_DATABASE'):
    log.info('connect to %s',  os.environ['BEACON_DATABASE'])
    server = kaa.beacon.server.connect(os.environ['BEACON_DATABASE'])
    if os.environ.get('BEACON_MONITOR'):
        for dirname in os.environ.get('BEACON_MONITOR').split(':'):
            log.info('monitor %s', dirname)
            server.monitor_dir(dirname)
            
# start garbage collector
kaa.notifier.Timer(garbage_collect).start(10)
if shutdown:
    log.info('set autoshutdown timer to 3 seconds')
    kaa.beacon.server.autoshutdown(3)

kaa.notifier.loop()
log.info('stop beacon')

try:
    # try to kill thumbnailer
    os.kill(pid, 15)
except OSError:
    pass

#wait for dead thumbnailer
os.waitpid(pid, 0)
