#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
# -----------------------------------------------------------------------------
# beacon
# -----------------------------------------------------------------------------
# $Id$
#
# -----------------------------------------------------------------------------
# kaa.beacon - A virtual filesystem with metadata
# Copyright (C) 2006-2008 Dirk Meyer
#
# First Edition: Dirk Meyer <dischi@freevo.org>
# Maintainer:    Dirk Meyer <dischi@freevo.org>
#
# Please see the file AUTHORS for a complete list of authors.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MER-
# CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# -----------------------------------------------------------------------------

# python imports
import os
import sys
import getopt
import time
import fcntl
import termios
import struct
import logging

# FIXME: most of this list should probably be kept in kaa.db
IGNORE_KEYS = [ 'name', 'parent', 'parent_id', 'parent_type', 'media', 'mtime',
                'computed_id', 'type', 'id' ]

# insert kaa path information
__site__ = '../lib/python%s.%s/site-packages' % sys.version_info[:2]
__site__ = os.path.abspath(os.path.join(os.path.dirname(__file__), __site__))
if not __site__ in sys.path:
    sys.path.insert(0, __site__)

# kaa imports
import kaa
import kaa.db
import kaa.beacon
import kaa.utils

# get logging object
log = logging.getLogger('beacon')

def usage(error_code):
    print 'beacon-search [options] [search terms]'
    print 'options:'
    print '--info             displays info about the database'
    print '--type type        searches only the given file types (use --info to show types)'
    print '--monitor          do not exit after search and monitor for changes'
    print '--details          show detailed metadata in search results'
    print '--list-media       lists all known media'
    print '--del-media media  delete given media from the database'
    print '--debug            Enables debugging mode for all loggers'
    print '--help | -h        this message'
    print
    print
    print 'Search terms can be arbitrary keywords or key=value pairs.  e.g.'
    print '  beacon-search Helden Blind'
    print '  beacon-search dirname=/local/video'
    print '  beacon-search --monitor dirname=/local/video'
    print '  beacon-search artist=Silbermond'
    print '  beacon-search --type image vacation'
    sys.exit(error_code)


def print_results(results, detailed = False):
    def fit(s, l):
        """
        Fits string s in length l by replacing middle characters with '...'
        """
        if len(s) > l:
            over = len(s) - l + 3
            return s[:(len(s)-over)/2] + '...' + s[(len(s)+over)/2:]
        return s

    if not isinstance(results.get(), (list, tuple)):
        results = [ results.get() ]

    if len(results) == 0:
        print 'No results.'
        return

    # special handling for attr search
    if isinstance(results[0], (str, unicode)):
        for r in results:
            print r
        return

    # Get terminal dimensions
    try:
        h, w = struct.unpack('hh', fcntl.ioctl(sys.stdin.fileno(), termios.TIOCGWINSZ, 'xxxx'))
    except:
        w = 75

    valid_results = [len(x.get('type')) for x in results if x.get('type')]
    if len(valid_results):
        type_col_len = max(valid_results) + 1
        type_col_len = max(type_col_len, 4)
    else:
        type_col_len = 4
    uri_col_len = min(w - 1 - type_col_len - 2, max([len(x.url) for x in results]))
    print 'Type'.ljust(type_col_len), 'URI'.ljust(uri_col_len)
    print '-' * type_col_len, '-' * uri_col_len
    for r in results:
        t = r.get('type')
        if t is None:
            t = '???'
        print t.ljust(type_col_len), fit(r.url, uri_col_len)
        if detailed:
            for key in r.keys():
                if r.get(key) and key not in IGNORE_KEYS:
                    print ' ' * (type_col_len + 5) + '| %s: %s' % (key, r.get(key))



def progress(cur, total, item):
    n = 0
    if total > 0:
        n = int((cur / float(total)) * 50)
    sys.stdout.write("|%51s| %d / %d\r" % (("="*n + ">").ljust(51), cur, total))
    sys.stdout.flush()
    if cur == total:
        print

def changed(result, details):
    print '\nBeacon query update:'
    print_results(result, details)

def uptodate():
    print 'Beacon has finished the query and parsing.'


@kaa.coroutine()
def main():
    try:
        # list of modes this script can start in
        possible_modes = [ 'info', 'list-media', 'del-media']

        # read arguments
        opts = [ 'verbose=', 'help', 'type=',
                 'monitor', 'debug', 'details' ] + possible_modes
        opts, args = getopt.gnu_getopt(sys.argv[1:], 'h', opts)
    except getopt.GetoptError:
        usage(1)

    mode     = 'search'
    monitor  = False
    qtype    = None
    details  = False

    for o, a in opts:
        if o.startswith('--') and o[2:] in possible_modes:
            if mode != 'search':
                usage(1)
            mode = o[2:]
        elif o == '--verbose':
            a = a.lower()
            if a == 'all':
                logging.getLogger('beacon').setLevel(logging.INFO)
            else:
                for m in a.split(','):
                    logging.getLogger('beacon.' + m).setLevel(logging.INFO)
        elif o == '--debug':
            # Set DEBUG level on root logger
            logging.getLogger().setLevel(logging.DEBUG)
        elif o == '--monitor':
            monitor = True
        elif o == '--type':
            qtype = a
        elif o == '--details':
            details = True
        elif o in ('--help', '-h'):
            usage(0)

    if mode == 'search' and not args:
        usage(0)

    if mode in ('search', 'info', 'list-media', 'del-media'):
        try:
            kaa.beacon.connect().wait()
        except kaa.beacon.ConnectError:
            print 'beacon-daemon not running.'
            sys.exit(1)


    if mode == 'info':
        info = kaa.beacon.get_db_info()
        if isinstance(info, kaa.InProgress):
            yield info
            info = info.result
        print 'Beacon database information:'
        print
        print 'Total objects:'.rjust(20), info['total']
        print 'Indexed keywords:'.rjust(20), info['termcounts']['keywords']
        print
        print 'Object breakdown by type:'
        for key in info['count']:
            print (key + ':').rjust(15), info['count'][key]
        sys.exit(0)


    if mode == 'list-media':
        for m in (yield kaa.beacon.list_media(available=False)):
            available = ''
            if m.device:
                available = '(%s)' % m.device
            print '%4d %s %s' % (m.beaconid, m.label, available)
        sys.exit(0)


    if mode == 'del-media':
        try:
            media = int(args.pop(0))
        except:
            print 'media must be an int'
            sys.exit(1)
        if media == 0:
            print 'media 0 can\'t be deleted'
            sys.exit(1)
        yield kaa.beacon.delete_media(media)
        sys.exit(0)

    query   = {}
    if qtype:
        query['type'] = qtype

    for a in args:
        if '=' not in a:
            if 'keywords' not in query:
                query['keywords'] = a
            else:
                query['keywords'] += ' ' + a
        else:
            key, value = a.split('=', 1)
            if key in ('title', 'album', 'artist', 'series'):
                value = unicode(value)
            elif key in ('limit', 'season', 'episode'):
                value = int(value)
            if isinstance(value, basestring) and "%" in value:
                # Treat as wildcard search, use LIKE operator.
                query[key] = kaa.db.QExpr("like", "%%%s%%" % value)
            else:
                query[key] = value

    t1 = time.time()
    if 'dirname' in query:
        directory = yield kaa.beacon.get(query['dirname'])
        if 'recursive' in query:
            result = yield directory.list(recursive=True)
        else:
            result = yield directory.list()
    else:
        result = yield kaa.beacon.query(**query)

    t2 = time.time()
    print_results(result, details)
    if not isinstance(result.get(), (list, tuple)):
        result = [ result.get() ]
    print 'Query took %s seconds; %d results' % ((t2-t1), len(result))
    if not monitor:
        sys.exit(0)
    result.signals['changed'].connect(changed, result, details)
    result.signals['progress'].connect(progress)
    result.signals['up-to-date'].connect(uptodate)
    result.monitor()

if __name__ == '__main__':
    if not main().finished:
        kaa.main.run()
