#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
# -----------------------------------------------------------------------------
# Webinfo
# -----------------------------------------------------------------------------
# $Id$
#
# -----------------------------------------------------------------------------
# kaa.webinfo - Receive Metadata from the Web
# Copyright (C) 2009 Dirk Meyer
#
# First Edition: Dirk Meyer <dischi@freevo.org>
# Maintainer:    Dirk Meyer <dischi@freevo.org>
#
# Please see the file AUTHORS for a complete list of authors.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MER-
# CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# -----------------------------------------------------------------------------

import re
import os
import sys
import getopt

import kaa
import kaa.webmetadata

kaa.webmetadata.init()

@kaa.coroutine()
def main():
    tvdb = kaa.webmetadata.thetvdb
    moviedb = kaa.webmetadata.themoviedb

    opts, args = getopt.gnu_getopt(sys.argv[1:], '', ['sync', 'search', 'match' ])
    for o, a in opts:
        if o == '--sync':
            # Sync the db. Call this every day or so
            yield tvdb.sync()
            sys.exit(0)

        if o == '--search':
            # tvdb --search list of filenames
            for filename in args:
                print 'Trying to find information for', os.path.basename(filename)
                series = tvdb.from_filename(filename)
                if series.series:
                    print 'known as "%s %sx%02d - %s"' % (series.series.SeriesName, series.episode.SeasonNumber, \
                          int(series.episode.EpisodeNumber), series.episode.EpisodeName)
                    print
                    continue
                movie = moviedb.from_filename(filename)
                if movie.available:
                    print 'known as "%s (%s)"' % (movie.title, movie.year)
                    print
                    continue
                (yield movie.fetch())
                if movie.available:
                    print 'added as "%s (%s)"' % (movie.title, movie.year)
                    print
                    continue
                # ok, now let's search the various databases
                if series.alias:
                    result = (yield series.search())
                    if len(result):
                        print 'It could be one of the following TV shows'
                        for data in result:
                            print ' tvdb:%s %s (%s)' % (data['id'], data['SeriesName'], data.get('FirstAired'))
                        print
                        continue
                result =(yield movie.search())
                if result:
                    for r in result:
                        print ' moviedb:%s %s (%s)' % (r._data['id'], kaa.unicode_to_str(r.title), r.year)
                    print
                    continue
                print 'error: unable to get any additional information'
                print
            sys.exit(0)

        if o == '--match':
            # create a match between series name in filename and an id
            # in the db. Use --search to get an id
            # tvdb --match TVDB_ID filename
            sid, filename = args
            if sid.startswith('tvdb:'):
                f = tvdb.from_filename(filename)
                if not (yield f.match(sid[5:])):
                    print 'not found'
                    sys.exit(1)
                print 'add alias "%s" to "%s"' % (f.alias, f.series.name)
            elif sid.startswith('moviedb:'):
                print 'TheMovieDB backend has no --match support yet'
            else:
                print 'unsupported id'
            sys.exit(0)

    
    for filename in args:
        print filename
        f = kaa.webmetadata.parse(filename)
        if f:
            for key, value in f.items():
                print ' ', kaa.unicode_to_str(u'%s: %s' % (key, value))
            print
            continue
        print filename, 'not found'
        print
    sys.exit(0)

main()
kaa.main.run()
